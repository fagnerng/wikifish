package models;

import play.db.ebean.Model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import java.util.ArrayList;
import java.util.List;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.FetchType.LAZY;

@Entity
//@JsonInclude(NON_EMPTY)
public class Fish extends Model {

<<<<<<< HEAD
    private enum ReproductionEnum {
        EGGYLAYER, LIVEBEARER, MOUTHBROODER
    }

    private enum AquariumLightEnum {
        BRIGHT, MEDIUM, DARK
    }

    private enum TemperamentEnum {
        PEACEFUL, AGRESSIVE
    }

    private enum AquariumSetUpEnum {
        DENSIDLY_PLANTED, ONLY_ROCKS, ONLY_SUBSTRACT, COMPLETED_SET
    }

    private enum SwimmingEnum {
        BOTTOM, TOP, MIDDLE, NO_SPECIAL
    }

=======
    public static final Finder<Long, Fish> FINDER = new Finder(Long.class, Fish.class);
>>>>>>> 4fa6a579f48f94d87b6d21236642e42b68b70204

    @Id
    private long id;
    private String usualName;
    private String cientificName;
    private float ph;
    private int dh;
    private float temperature;
    private float maximumLength;
    private float aquarium_liters;
    private boolean dry_package_food;
    private boolean live_worms;
    private boolean live_fish;
    private boolean vegetarian;
<<<<<<< HEAD
    private ReproductionEnum reproduction;
    private AquariumLightEnum aquariumLight;
    private TemperamentEnum temperament;
    private AquariumSetUpEnum aquariumSetUp;
    private SwimmingEnum swimming;
=======
    private boolean peaceful;
    private boolean agressive;
    private boolean eggylayer;
    private boolean livebearer;
    private boolean mothbrooder;
    private boolean bottom;
    private boolean top;
    private boolean middle;
    private boolean no_special;
    private boolean densidly_plated;
    private boolean only_rocks;
    private boolean only_substract;
    private boolean complete_set;
    private boolean bright;
    private boolean medium;

    private boolean dark;
>>>>>>> 4fa6a579f48f94d87b6d21236642e42b68b70204

    @OneToMany(cascade = ALL, fetch = LAZY)
    private List<Comment> comments;

    @OneToOne(cascade = ALL)
    private Region region;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getUsualName() {
        return usualName;
    }

    public void setUsualName(String usualName) {
        this.usualName = usualName;
    }

    public String getCientificName() {
        return cientificName;
    }

    public void setCientificName(String cientificName) {
        this.cientificName = cientificName;
    }

    public float getPh() {
        return ph;
    }

    public void setPh(float ph) {
        this.ph = ph;
    }

    public int getDh() {
        return dh;
    }

    public void setDh(int dh) {
        this.dh = dh;
    }

    public float getTemperature() {
        return temperature;
    }

    public void setTemperature(float temperature) {
        this.temperature = temperature;
    }

    public float getMaximumLength() {
        return maximumLength;
    }

    public void setMaximumLength(float maximumLength) {
        this.maximumLength = maximumLength;
    }

    public float getAquarium_liters() {
        return aquarium_liters;
    }

    public void setAquarium_liters(float aquarium_liters) {
        this.aquarium_liters = aquarium_liters;
    }

    public boolean isDry_package_food() {
        return dry_package_food;
    }

    public void setDry_package_food(boolean dry_package_food) {
        this.dry_package_food = dry_package_food;
    }

    public boolean isLive_worms() {
        return live_worms;
    }

    public void setLive_worms(boolean live_worms) {
        this.live_worms = live_worms;
    }

<<<<<<< HEAD
    public boolean isLive_fish() {
        return live_fish;
=======
    public float getMaximumLength() {
        return maximumLength;
>>>>>>> 4fa6a579f48f94d87b6d21236642e42b68b70204
    }

    public void setLive_fish(boolean live_fish) {
        this.live_fish = live_fish;
    }

    public boolean isVegetarian() {
        return vegetarian;
    }

    public void setVegetarian(boolean vegetarian) {
        this.vegetarian = vegetarian;
    }

    public ReproductionEnum getReproduction() {
        return this.reproduction;
    }

    public void setReproduction(ReproductionEnum reproduction) {
        this.reproduction = reproduction;
    }

    public AquariumLightEnum getAquariumLight() {
        return this.aquariumLight;
    }

    public void setAquariumLight(AquariumLightEnum aquariumLight) {
        this.aquariumLight = aquariumLight;
    }

    public TemperamentEnum getTemperament() {
        return this.temperament;
    }

    public void setTemperament(TemperamentEnum temperament) {
        this.temperament = temperament;
    }

    public AquariumSetUpEnum getAquariumSetUp() {
        return this.aquariumSetUp;
    }

    public void setAquariumSetUp(AquariumSetUpEnum aquariumSetUp) {
        this.aquariumSetUp = aquariumSetUp;
    }

    public SwimmingEnum getSwimming() {
        return this.swimming;
    }

    public void setSwimming(SwimmingEnum swimming) {
        this.swimming = swimming;
    }

    public Region getRegion() {
        return region;
    }

    public void setRegion(Region region) {
        this.region = region;
    }

    public List<Comment> getComments() {
        return comments;
    }

    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }

    public void addComment(Comment comment) {
        this.comments.add(comment);
    }

    public Fish() {
        comments = new ArrayList<>();
    }

    public Fish(String usualName, String cientificName) {
        this.usualName = usualName;
        this.cientificName = cientificName;
        this.ph = 7.0f;
        this.dh = 160;
        this.temperature = 37.0f;
        this.maximumLength = 15.0f;
        this.aquarium_liters = 100.0f;
        this.dry_package_food = true;
        this.live_worms = false;
        this.live_fish = false;
        this.vegetarian = false;
        this.reproduction = ReproductionEnum.EGGYLAYER;
        this.aquariumLight = AquariumLightEnum.MEDIUM;
        this.temperament = TemperamentEnum.PEACEFUL;
        this.aquariumSetUp = AquariumSetUpEnum.COMPLETED_SET;
        this.swimming = SwimmingEnum.NO_SPECIAL;
        comments = new ArrayList<>();
    }

    public static final Finder<Long, Fish> FINDER = new Finder(Long.class, Fish.class);


}
